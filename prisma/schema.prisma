generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Feedbacks {
  id         Int      @id @default(autoincrement())
  driver_id  String
  nps        Int
  reason     String
  first_trip Boolean
  text       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}


model Options {
  driver_id         Int      @id @default(autoincrement())
  options           String
  createdAt  DateTime @default(now())
}

model Clusters {
  zone_base_id Int @id @default(autoincrement())
  zone_id      String
  zone_name    String
  station_id   Int
  station_name String
  zone_detail  String
}

model Bookings {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  driver_id String   @db.VarChar(255)
  name      String
  plate     String
  vehicle   String
  station   String
  ownflex   Boolean @default(false)
  phone     String
  city      String
  cep       String
  date      DateTime
  event_id  Int
  info      String?
  event     Event    @relation(fields: [event_id], references: [id])
}

model Event {
  id         Int        @id @default(autoincrement())
  event_type EVENT_TYPE
  location   String
  options    String?
  timezone   String
  cron_exp   String
  bookings   Bookings[]
}

model Preferences {
  id          Int      @id @default(autoincrement())
  driver_id   String
  driver_name String
  phone       String
  station     String
  vehicle     VEHICLE
  ownflex   Boolean @default(false)
  cep         String
  city        String
  createdAt   DateTime @default(now())
  booking_id  Int?
}

model Allocations {
  id          Int      @id @default(autoincrement())
  driver_id   String
  description String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt @default(now())
  endTime    DateTime?
  offer      Offers @relation(fields: [offerId], references: [id],onDelete: Cascade, onUpdate: Cascade)
  offerId    Int
}

model Offers {
  id          Int      @id @default(autoincrement())
  station     String
  cluster     String
  shift       SHIFTS
  duration    Int @default(60)
  spots       Int @default(1)
  description String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt @default(now())
  endTime     DateTime?
  allocations Allocations[]
  offer_type OFFER_TYPE @default(MANUAL)
}

model Drivers {
  driver_id String  @id
  name      String
  phone     String
  station   String
  plate     String
  vehicle   VEHICLE
  trips     Int @default(0)
  ownflex   Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt @default(now())
}


enum EVENT_TYPE {
  FIRST_TRIP
  AVAILABILITY
}

enum SHIFTS {
  AM
  PM
  SD
}

enum VEHICLE {
  PASSEIO
  MOTO
  FIORINO
  VAN
  VUC
}

enum ALLOCATION_TYPE {
  CROWDSOURCING
  MANUAL
  AUTOMATIC
}

enum OFFER_TYPE {
  CROWDSOURCING
  MANUAL
  AUTOMATIC
}
